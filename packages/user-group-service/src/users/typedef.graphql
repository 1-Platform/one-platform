scalar DateTime

"""
API Aceess Roles Defined in the APIs
"""
enum APIROLE {
  ADMIN
  USER
}

"""
LDAP Data model which returns from ldap source
"""
type LdapType {
  dn: String
  controls: [String]
  memberOf: [String]
  rhatContactMethod: String
  roomInt: String
  rhatOfficeFloor: String
  rhatOfficeLocation: String
  registeredAddress: String
  street: String
  physicalDeliveryOfficeName: String
  postalCode: Int
  rhatCostCenterDesc: String
  rhatUUID: String
  uidInt: Int
  rhatJobTitle: String
  employeeType: String
  rhatAdjSvcDate: String
  co: String
  rhatAmbassadorED: String
  l: String
  cn: String
  mobile: String
  manager: String
  c: String
  homeDirectory: String
  rhatOraclePersonID: Int
  loginShell: String
  st: String
  rhatTeamLead: Boolean
  sn: String
  rhatSupervisorID: Int
  uid: String
  title: String
  rhatPersonType: String
  rhatNickName: String
  displayName: String
  telephoneInt: Int
  gidInt: Int
  rhatPhoneExt: Int
  rhatLocation: String
  rhatCostCenter: Int
  givenName: String
  rhatGeo: String
  preferredTimeZone: String
  rhatHireDate: String
  rhatCurrency: String
  rhatPrimaryMail: String
  employeeInt: Int
  rhatWorkHours: String
  mail: String
  rhatOriginalHireDate: String
  rhatLegalEntity: String
  rhatJobCode: Int
  rhatBJNMeetingID: Int
  rhatSocialURL: [String]
  rhatJobRole: String
  rhatBJNUserName: String
  objectClass: [String]
}

type UserType {
  _id: String
  name: String
  title: String
  uid: String
  rhatUUID: String
  memberOf: [String]
  isActive: Boolean
  apiRole: APIROLE
  createdBy: String
  createdOn: DateTime
  updatedBy: String
  updatedOn: DateTime
}
input UserInput {
  _id: String
  name: String
  title: String
  uid: String
  rhatUUID: String
  memberOf: [String]
  isActive: Boolean
  apiRole: APIROLE
  createdBy: String
  createdOn: DateTime
  updatedBy: String
  updatedOn: DateTime
}

enum ldapFieldType {
  uid
  cn
  rhatUUID
}

type RoverUserType {
  uid: String
  cn: String
  rhatJobTitle: String
  rhatCostCenter: String
  rhatCostCenterDesc: String
  rhatGeo: String
  givenName: String
  displayName: String
  employeeType: String
  rhatLocation: String
  rhatOfficeLocation: String
  mobile: String
  mail: String
  country: String
  homePhone: String
  telephoneNumber: String
  rhatPhoneExt: String
  objectClass: String
  rhatUuid: String
  serviceAccount: Boolean
  manager: RoverUserType
  roverGroups: [RoverGroupType]
}

type RoverGroupType {
  cn: String
  name: String
  description: String
  ownerUids: [String]
  memberUids: [String]
  inclusionUids: [String]
  exclusionUids: [String]
  notes: String
  membershipInfo: String
  userDefinedRoleList: [String]
  objectClass: String,
  membershipInfo: MembershipType
}

type MembershipType {
  query: String
}
type Mutation {
  """
  Add a new User
  """
  addUser(input: UserInput): UserType
  """
  Update existing User
  """
  updateUser(input: UserInput): UserType
  """
  Delete a User by ID
  """
  deleteUser(_id: String!): UserType
  """
  add user from LDAP
  """
  addUserFromLDAP(uid: String!): UserType
}


type Query {
  """
  Fetches specific User by uid, rhatUUID, apiRole, name
  """
  getUsersBy(
    uid: String
    rhatUUID: String
    apiRole: String
    name: String
  ): [UserType] @deprecated(reason: "This query is no longer maintained")
  """
  Fetches all Users
  """
  listUsers: [UserType] @deprecated(reason: "This query is no longer maintained")
  """
  Fetch LDAP Group Members
  """
  getGroupMembers(cn: String): [LdapType] @deprecated(reason: "This query is no longer maintained")
  """
  Fetches specific User by uid, rhatUuid
  """
  user(uid: String, rhatUUID: String): RoverUserType
  """
  Fetches Users based on criteria
  """
  findUsers(ldapfield: ldapFieldType, value: String): [RoverUserType]
}
