scalar DateTime

"""
API Aceess Roles Defined in the APIs
"""
enum APIROLE {
  ADMIN
  USER
}

enum ldapFieldType {
  uid
  cn
  rhatUUID
}

type RoverUserType {
  uid: String
  cn: String
  rhatJobTitle: String
  rhatCostCenter: String
  rhatCostCenterDesc: String
  rhatGeo: String
  givenName: String
  displayName: String
  employeeType: String
  rhatLocation: String
  rhatOfficeLocation: String
  mobile: String
  mail: String
  country: String
  homePhone: String
  telephoneNumber: String
  rhatPhoneExt: String
  objectClass: String
  rhatUuid: String
  serviceAccount: Boolean
  manager: RoverUserType
  roverGroups: [RoverGroupType]
  createdOn: DateTime,
  updatedOn: DateTime
}

input RoverUserInput {
  _id: ID
  uid: String
  cn: String
  rhatJobTitle: String
  rhatCostCenter: String
  rhatCostCenterDesc: String
  rhatGeo: String
  givenName: String
  displayName: String
  employeeType: String
  rhatLocation: String
  rhatOfficeLocation: String
  mobile: String
  mail: String
  country: String
  homePhone: String
  telephoneNumber: String
  rhatPhoneExt: String
  objectClass: String
  rhatUuid: String!
  serviceAccount: Boolean
  manager: String
}

type RoverGroupType {
  cn: String
  name: String
  description: String
  ownerUids: [String]
  memberUids: [String]
  inclusionUids: [String]
  exclusionUids: [String]
  notes: String
  membershipInfo: String
  userDefinedRoleList: [String]
  objectClass: String,
  membershipInfo: MembershipType
}

type MembershipType {
  query: String
}
type Mutation {
  """
  Add a new User
  """
  addUser(input: RoverUserInput): RoverUserType
  """
  Update existing User
  """
  updateUser(input: RoverUserInput): RoverUserType
  """
  Delete a User by ID
  """
  deleteUser(_id: String!): RoverUserType
  """
  add user from Rover
  """
  addUserFromRover(uid: String!): RoverUserType
}


type Query {
  """
  Fetches specific User from Cache by uid, rhatUuid
  """
  getUsersBy(
    uid: String
    rhatUuid: String
  ): [RoverUserType]
  """
  Fetches all Users
  """
  listUsers: [RoverUserType]
  """
  Fetches Users based on criteria from Rover
  """
  findUsers(ldapfield: ldapFieldType, value: String): [RoverUserType]
}
