scalar DateTime

"""
API Aceess Roles Defined in the APIs
"""
enum APIROLE {
  ADMIN
  USER
}

enum ldapFieldType {
  uid
  cn
  rhatUUID
}

type RoverUserType {
  uid: String
  name: String @deprecated(reason: "Field is deprecated!")
  cn: String
  rhatJobTitle: String
  title: String @deprecated(reason: "Field is deprecated!")
  rhatCostCenter: String
  rhatCostCenterDesc: String
  rhatGeo: String
  givenName: String
  displayName: String
  employeeType: String
  rhatLocation: String
  rhatOfficeLocation: String
  mobile: String
  mail: String
  country: String
  homePhone: String
  telephoneNumber: String
  rhatPhoneExt: String
  objectClass: String
  rhatUUID: String
  serviceAccount: Boolean
  manager: UserType
  roverGroups: [GroupType]
  createdOn: DateTime,
  updatedOn: DateTime
}

type UserType {
  _id: String
  uid: String
  name: String @deprecated(reason: "Field is deprecated!")
  cn: String
  isActive: Boolean
  rhatJobTitle: String
  title: String @deprecated(reason: "Field is deprecated!")
  rhatCostCenter: String
  rhatCostCenterDesc: String
  employeeType: String
  rhatOfficeLocation: String
  mail: String
  rhatUUID: String
  serviceAccount: Boolean
  manager: UserType
  roverGroups: [GroupType]
  createdOn: DateTime
  updatedOn: DateTime
}

input UserInput {
  _id: ID
  uid: String
  name: String
  isActive: Boolean
  rhatJobTitle: String
  rhatCostCenter: String
  rhatCostCenterDesc: String
  employeeType: String
  rhatOfficeLocation: String
  mobile: String
  mail: String
  rhatUUID: String!
  serviceAccount: Boolean
  manager: String
}

type GroupType {
  cn: String
  name: String
  description: String
  ownerUids: [String]
  memberUids: [String]
  inclusionUids: [String]
  exclusionUids: [String]
  notes: String
  membershipInfo: String
  userDefinedRoleList: [String]
  objectClass: String,
  membershipInfo: MembershipType
}

type MembershipType {
  query: String
}
type Mutation {
  """
  Add a new User
  """
  addUser(input: UserInput): UserType
  """
  Update existing User
  """
  updateUser(input: UserInput): UserType
  """
  Delete a User by ID
  """
  deleteUser(_id: String!): UserType
  """
  add user from Rover
  """
  addUserFromRover(uid: String!): UserType
}


type Query {
  """
  Fetches specific User from Cache by uid, rhatUUID
  """
  getUsersBy(
    uid: String
    rhatUUID: String
  ): [UserType]
  """
  Fetches all Users
  """
  listUsers: [UserType]
  """
  Fetches Users based on criteria from Rover
  """
  findUsers(ldapfield: ldapFieldType, value: String): [RoverUserType]
}
