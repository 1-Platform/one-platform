scalar DateTime

type FeedbackUserType {
  _id: String
  name: String
  title: String
  uid: String
  rhatUUID: String
  isActive: Boolean
}

type FeedbackWithUserType {
  _id: String
  description: String
  ticketID: String
  experience: String
  spa: String
  createdOn: DateTime
  createdBy: FeedbackUserType
  updatedOn: DateTime
  updatedBy: FeedbackUserType
  title: String
  feedbackType: String
}

type FeedbackType {
  _id: String
  description: String
  ticketID: String
  experience: String
  spa: String
  createdOn: DateTime
  createdBy: String
  updatedOn: DateTime
  updatedBy: String
  title: String
  feedbackType: String
}

input FeedbackInput {
  _id: String
  description: String
  ticketID: String
  experience: String
  spa: String
  createdOn: DateTime
  createdBy: String
  updatedOn: DateTime
  updatedBy: String
  title: String
  feedbackType: String
}

type StatusType {
  name: String
}

type AssigneeType {
  name: String
}

type TicketType {
  status: StatusType
  assignee: AssigneeType
  ticketID: String
}

type Query {
  # Fetches all Feedbacks
  listFeedback: [FeedbackWithUserType]
  # Fetches specific Feedback by its id
  getFeedback(id: String!): FeedbackWithUserType
  #Fetches Feedbacks by any property
  getFeedbackBy(input: FeedbackInput!): [FeedbackWithUserType]
  #Fetches tickets from jiraboard
  getAllJiraIssues: [TicketType]
}

type Mutation {
  # Add a new Feedback
  addFeedback(input: FeedbackInput!): FeedbackType
  # Update Feedback based on input
  updateFeedback(input: FeedbackInput!): FeedbackType
  # Delete specific Feedback by id
  deleteFeedback(id: String!): FeedbackType
}
