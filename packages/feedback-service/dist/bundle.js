!function(e){var n={};function i(t){if(n[t])return n[t].exports;var a=n[t]={i:t,l:!1,exports:{}};return e[t].call(a.exports,a,a.exports,i),a.l=!0,a.exports}i.m=e,i.c=n,i.d=function(e,n,t){i.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:t})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,n){if(1&n&&(e=i(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var t=Object.create(null);if(i.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var a in e)i.d(t,a,function(n){return e[n]}.bind(null,a));return t},i.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(n,"a",n),n},i.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},i.p="",i(i.s=0)}([function(e,n,i){"use strict";var t=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(n,"__esModule",{value:!0});const a=t(i(1)),r=i(2),d=t(i(3)),s=t(i(4)),o=(t(i(5)),i(6)),{ApolloLogExtension:u}=i(7),c=t(i(8)),l=t(i(9)),p=i(10),m=process.env.PORT||8080,k=a.default(),f=[()=>new u({level:"info",timestamp:!0})];c.default.plugin(e=>{e.options.usePushEach=!0}),c.default.set("useNewUrlParser",!0),c.default.set("useFindAndModify",!1),c.default.set("useCreateIndex",!0),c.default.set("useUnifiedTopology",!0);const y=`mongodb://${process.env.DB_USER&&process.env.DB_PASSWORD?`${process.env.DB_USER}:${process.env.DB_PASSWORD}@`:""}localhost/db_name`;c.default.connect(y,{useNewUrlParser:!0,useCreateIndex:!0}).catch(console.error),c.default.connection.on("error",e=>{console.error(e)});const v=new r.ApolloServer({playground:!0,schema:o.mergeSchemas({schemas:[l.default],resolvers:[p.FeedbackResolver]}),subscriptions:{path:"/subscriptions"},formatError:e=>({message:e.message,locations:e.locations,stack:e.stack?e.stack.split("\n"):[],path:e.path}),extensions:f});v.applyMiddleware({app:k});const b=s.default.createServer({key:d.default.readFileSync("/etc/pki/tls/private/server.key"),cert:d.default.readFileSync("/etc/pki/tls/certs/server.crt")},k);v.installSubscriptionHandlers(b),n.default=b.listen({port:m},()=>{console.log(`ðŸš€ Microservice running on local at ${m}${v.graphqlPath}`)})},function(e,n){e.exports=require("express")},function(e,n){e.exports=require("apollo-server-express")},function(e,n){e.exports=require("fs")},function(e,n){e.exports=require("https")},function(e,n){e.exports=require("http")},function(e,n){e.exports=require("graphql-tools")},function(e,n){e.exports=require("apollo-log")},function(e,n){e.exports=require("mongoose")},function(e,n){var i={kind:"Document",definitions:[{kind:"ObjectTypeDefinition",name:{kind:"Name",value:"Query"},interfaces:[],directives:[],fields:[{kind:"FieldDefinition",name:{kind:"Name",value:"list"},arguments:[],type:{kind:"ListType",type:{kind:"NamedType",name:{kind:"Name",value:"FeedbackType"}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"get"},arguments:[{kind:"InputValueDefinition",name:{kind:"Name",value:"ID"},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"ID"}}},directives:[]}],type:{kind:"NamedType",name:{kind:"Name",value:"FeedbackType"}},directives:[]}]},{kind:"ObjectTypeDefinition",name:{kind:"Name",value:"Mutation"},interfaces:[],directives:[],fields:[{kind:"FieldDefinition",name:{kind:"Name",value:"create"},arguments:[{kind:"InputValueDefinition",name:{kind:"Name",value:"input"},type:{kind:"NamedType",name:{kind:"Name",value:"FeedbackInput"}},directives:[]}],type:{kind:"NamedType",name:{kind:"Name",value:"FeedbackType"}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"update"},arguments:[{kind:"InputValueDefinition",name:{kind:"Name",value:"input"},type:{kind:"NamedType",name:{kind:"Name",value:"FeedbackInput"}},directives:[]}],type:{kind:"NamedType",name:{kind:"Name",value:"FeedbackType"}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"delete"},arguments:[{kind:"InputValueDefinition",name:{kind:"Name",value:"_id"},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]}],type:{kind:"NamedType",name:{kind:"Name",value:"FeedbackType"}},directives:[]}]},{kind:"ObjectTypeDefinition",name:{kind:"Name",value:"Subscription"},interfaces:[],directives:[],fields:[{kind:"FieldDefinition",name:{kind:"Name",value:"updatedFeedbackData"},arguments:[],type:{kind:"NamedType",name:{kind:"Name",value:"FeedbackType"}},directives:[]}]},{kind:"ObjectTypeDefinition",name:{kind:"Name",value:"FeedbackType"},interfaces:[],directives:[],fields:[{kind:"FieldDefinition",name:{kind:"Name",value:"message"},arguments:[],type:{kind:"NamedType",name:{kind:"Name",value:"String"}},directives:[]}]},{kind:"InputObjectTypeDefinition",name:{kind:"Name",value:"FeedbackInput"},directives:[],fields:[{kind:"InputValueDefinition",name:{kind:"Name",value:"message"},type:{kind:"NamedType",name:{kind:"Name",value:"String"}},directives:[]}]}],loc:{start:0,end:433}};i.loc.source={body:"type Query {\n  # Query Definitions\n  list: [FeedbackType]\n  get(ID: ID!): FeedbackType\n}\n\ntype Mutation {\n  # Mutation Definitions\n  create(input: FeedbackInput): FeedbackType\n  update(input: FeedbackInput): FeedbackType\n  delete(_id: String!): FeedbackType\n}\n\ntype Subscription {\n  # Subscription Definitions\n  updatedFeedbackData: FeedbackType\n}\n\ntype FeedbackType {\n  message: String\n}\n\ninput FeedbackInput {\n  message: String\n}\n\n",name:"GraphQL request",locationOffset:{line:1,column:1}};e.exports=i},function(e,n,i){"use strict";Object.defineProperty(n,"__esModule",{value:!0});const t=i(11);n.FeedbackResolver={Subscription:{updatedFeedbackData:{subscribe:()=>t.pubsub.asyncIterator("Feedback_UPDATE")}},Query:{list:(e,n,i)=>[{message:"GET API for Feedback microservice"}],get:(e,n,i)=>({message:"GET by ID API for Feedback microservice"})},Mutation:{create:(e,n,i)=>({message:"POST API for Feedback microservice"}),update:(e,n,i)=>({message:"PUT API for Feedback microservice"}),delete:(e,n,i)=>({message:"DELETE API for Feedback microservice"})}}},function(e,n,i){"use strict";Object.defineProperty(n,"__esModule",{value:!0});const t=i(12);n.pubsub=new t.RedisPubSub},function(e,n){e.exports=require("graphql-redis-subscriptions")}]);