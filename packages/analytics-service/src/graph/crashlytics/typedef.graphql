type SentryTeam {
  id: ID
  slug: String
  name: String
}

type SentryProject {
  id: ID
  slug: String
  name: String
  platform: String
  team: SentryTeam
}

type Crashlytics {
  id: ID
  slug: String
  name: String
  platform: String
  dsn: String
}

enum CrashlyticsGroupBy {
  OUTCOME
  CATEGORY
  REASON
  PROJECT
}

enum CrashlyticsField {
  QUANTITY
  TIMES_SEEN
}

enum CrashlyticsOutcome {
  ACCEPTED
  FILTERED
  RATE_LIMITED
  INVALID
  ABUSE
  CLIENT_DISCARD
}

input CrashlyticOptionInput {
  interval: String
  start: DateTime
  end: DateTime
  statsPeriod: String
  groupBy: CrashlyticsGroupBy!
  field: CrashlyticsField!
  outcome: CrashlyticsOutcome
}

type CrashlyticsStats {
  start: DateTime
  end: DateTime
  intervals: [DateTime]
  series: [Int]
  total: Int
}

input CreateCrashlyticsInput {
  appID: ID!
  projectID: String
  teamID: String
  platform: String!
}

input UpdateCrashlyticsInput {
  platform: String
  projectID: String
  teamID: String
}

type Query {
  getSentryTeams: [SentryTeam]
  getSentryProjects(teamID: ID!): [SentryProject]
  getCrashlyticStats(appID: String!, config: CrashlyticOptionInput!): CrashlyticsStats
}

type Mutation {
  setupCrashlytics(config: CreateCrashlyticsInput!): Crashlytics
  updateCrashlytics(appID: ID!, config: UpdateCrashlyticsInput!): Crashlytics
  deleteCrashlytics(appID: ID!): Crashlytics
}
