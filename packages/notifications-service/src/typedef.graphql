type Query {
  """
  Returns a list of all Active Notifications
  """
  listActiveNotifications(limit: Int): [Notification]

  """

  """
  listArchivedNotifications(limit: Int): [Notification]

  """
  Returns notifications matching the given selection criteria
  """
  getNotificationsBy(selector: NotificationPayloadInput!): [Notification]
}

type Mutation {
  """
  Creates a new notification and add it to the queue
  """
  newNotification(payload: NotificationPayloadInput!): Notification
}

type Subscription {
  newNotifications(target: [String!]!): PushNotification
}

scalar DateTime
scalar Data

enum NotificationStatusEnum {
  SUCCESS
  FAILED
}

type HomeType {
  _id: String
}

type PushNotification {
  id: ID
  title: String
  body: String
  link: String
  data: Data
  type: NotificationChannelEnum
  sentOn: DateTime
}

type Notification {
  id: ID
  subject: String
  body: String
  data: Data
  link: String
  secondaryTargets: [String]
  config: NotificationConfigType
  startDate: DateTime
  endDate: DateTime
  recurring: Boolean
  createdOn: DateTime
  createdBy: String
  updatedOn: DateTime
  updatedBy: String

  """
  Only available for Archived Notifications
  """
  status: NotificationStatusEnum
  """
  Only available for Archived Notifications
  """
  receipt: String
  """
  Only available for Archived Notifications
  """
  sentOn: DateTime
  """
  Only available for Archived Notifications
  """
  messageId: String
}

input NotificationPayloadInput {
  id: ID
  configID: ID
  subject: String
  body: String
  data: Data
  link: String
  secondaryTargets: [String]
  startDate: DateTime
  endDate: DateTime
  recurring: Boolean
  createdOn: DateTime
  createdBy: String
  updatedOn: DateTime
  updatedBy: String
}
