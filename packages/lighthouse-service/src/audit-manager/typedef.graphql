scalar DateTime

enum Sort {
  ASC
  DESC
}

enum LHLeaderBoardCategory {
  PWA
  SEO
  BEST_PRACTICES
  ACCESSIBILITY
  PERFORMANCE
}

input LighthouseInput {
  sites: String
  auditId: String
  serverBaseUrl: String
  currentBranch: String
  authorName: String
  authorEmail: String
  buildToken: String
  commitMessage: String
  preset: String
}

input AddLHProjectInput {
  name: String!
  externalUrl: String
  baseBranch: String
}

type LighthouseScoreType {
  performance: Float
  accessibility: Float
  bestPractices: Float
  seo: Float
  pwa: Float
}

type LighthouseProjectType {
  id: ID
  name: String
  slug: String
  externalUrl: String
  token: ID
  adminToken: ID
  baseBranch: String
  createdAt: DateTime
  updatedAt: DateTime
}

type LighthouseBuildType {
  id: ID
  projectId: ID
  branch: String
  runAt: DateTime
  score: LighthouseScoreType
  createdAt: DateTime
  updatedAt: DateTime
}

type LighthouseBranchType {
  branch: String
}

type LighthouseLeaderBoardBuildType {
  id: ID
  projectId: ID
  branch: String
  runAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
}

type LighthouseLeaderBoardType {
  score: Int
  rank: Int
  build: LighthouseLeaderBoardBuildType
  project: LighthouseProjectType
}

type ListLHProjects {
  count: Int
  rows: [LighthouseProjectType]
}

type ListLHProjectBranches {
  count: Int
  rows: [LighthouseBranchType]
}

type ListLHLeaderBoard {
  count: Int
  rows: [LighthouseLeaderBoardType]
}

type Query {
  """
  List all projects registered in lighthouse server
  """
  listLHProjects(limit: Int, offset: Int, search: String): ListLHProjects
  """
  Fetch lighthouse report(lhr) from server.
  """
  listProjectLHReport(projectId: String!, buildId: String!): LighthouseScoreType
  """
  Fetch & Verify Project details of valid project
  """
  verifyLHProjectDetails(
    serverBaseUrl: String
    buildToken: String!
  ): LighthouseProjectType
  """
  Fetch Builds of the project by branch name and project id
  """
  listLHProjectBuilds(
    projectId: String!
    branch: String!
    limit: Int!
  ): [LighthouseBuildType]
  """
  Fetch the branches of a project.
  """
  listLHProjectBranches(
    projectId: String!
    limit: Int
    offset: Int
    search: String
  ): ListLHProjectBranches
  """
  Fetch the scores of a webproperty locally.
  """
  listLHScore(auditId: String!): [LighthouseScoreType]
  """
  Fetch the leaderboard showcasing project with highest scores
  """
  listLHLeaderboard(
    type: LHLeaderBoardCategory!
    limit: Int
    offset: Int
    sort: Sort
  ): ListLHLeaderBoard
}

type Mutation {
  """
  Create a new lighthouse property
  """
  createLHProject(project: AddLHProjectInput!): LighthouseProjectType
  """
  Audit Website with Lighthouse CI
  """
  auditWebsite(property: LighthouseInput): String
  """
  Upload the lhr to server
  """
  uploadLHReport(property: LighthouseInput): String
}

type Subscription {
  """
  Watcher for the audit status.
  """
  autorun: String
}
