scalar DateTime

enum APIROLE {
  ADMIN
  USER
}

enum SOURCE {
  JIRA
  GITHUB
  GITLAB
}

type HomeFeedbackType {
  source: SOURCE
  sourceUrl: String
  isActive: Boolean
  projectKey: String
}

input HomeFeedbackInput {
  source: SOURCE
  sourceUrl: String
  isActive: Boolean
  projectKey: String
}

enum APPLICATIONTYPE {
  BUILTIN
  HOSTED
}
type PermissionsType {
  roverGroup: String
  role: APIROLE
}
type Contacts {
  developers: [String]
  qe: [String]
  stakeholders: [String]
}
input ContactsInput {
  developers: [String]
  qe: [String]
  stakeholders: [String]
}
type HomeUserType {
  _id: String
  name: String
  title: String
  uid: String
  rhatUUID: String
  memberOf: [String]
  isActive: Boolean
  apiRole: APIROLE
  createdBy: String
  createdOn: DateTime
  updatedBy: String
  updatedOn: DateTime
  feedback: HomeFeedbackType

}

type HomeIndexResponseCode {
  status: Int
}

type HomeType {
  _id: String
  name: String
  description: String
  link: String
  icon: String
  entityType: String
  colorScheme: String
  videoUrl: String
  owners: [HomeUserType]
  contacts: Contacts
  createdBy: HomeUserType
  createdOn: DateTime
  updatedBy: HomeUserType
  updatedOn: DateTime
  active: Boolean
  applicationType: APPLICATIONTYPE
  permissions: [PermissionsType]
  feedback: HomeFeedbackType
}
input PermissionsInput {
  roverGroup: String
  role: APIROLE!
}
input HomeInput {
  _id: String
  name: String
  description: String
  link: String
  icon: String
  entityType: String
  colorScheme: String
  videoUrl: String
  owners: [String]
  contacts: ContactsInput
  createdBy: String
  createdOn: DateTime
  updatedBy: String
  updatedOn: DateTime
  active: Boolean
  applicationType: APPLICATIONTYPE
  permissions: [PermissionsInput]
  feedback: HomeFeedbackInput
}

type Query {
  # Fetches all HomeType
  listHomeType: [HomeType]
  # Fetches specific HomeType by id
  getHomeType(_id: String!): HomeType
  # Fetches HomeType by any property
  getHomeTypeBy(input: HomeInput): [HomeType]
  # Fetches all HomeType for a user with rhuuid
  getHomeTypeByUser(rhuuid: String!): [HomeType]
}

type Mutation {
  # Add HomeType
  createHomeType(input: HomeInput): HomeType
  # Update HomeType
  updateHomeType(input: HomeInput): HomeType
  # Delete HomeType by id
  deleteHomeType(_id: String!): HomeType
  # Update Home Index for Search
  updateHomeIndex: HomeIndexResponseCode
}
